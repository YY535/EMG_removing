function varargout = EMG_rm_long(x, varargin)
% function [x, Ws, As, EMG_au, AW, armodel] = EMG_rm_long(x,[
%                                       silence_periods,included_periods,
%                                       SamplingRate, 
%                                       high_pass_freq, EMG_thrd, if_rm_mean, 
%                                       armodel, cmp_method, down_sample,
%                                       isave, save_range, FileName, savedir,
%                                       save_together,use_wb,EMG_shank,EMGFileName])
% function to remove the EMG noise in a long period. 
% EMG detected by high frequency (>high_pass_freq) correlated activity
% among channels. 
% Inputs: 
%   x: data, nt x nch.
%   Optional: 
%       silence_periods: whether one would like to remove noise only for
%           non_silenced periods
%       included_periods: the periods to be included.
%       SamplingRate: in Hz, default: 1000 Hz.
%       rm_linenoise: if remove line noise. default: true
%       line_thrd: power ratio between line band and other band. 
%                  defualt: 1.8, I'm being conservative here.
%       high_pass_freq: beginning of frequency to detect the muscle tone
%                       default: 100 Hz.
%       EMG_thrd: the thresholded (binary) data of the high EMG periods. 
%               Precomputed by the function of EMG_Cluster.m.
%       if_rm_mean: if return the decenterized signal, default: true.
%       armodel: the armodel or the name of the armodel file. if not given,
%               we woud use whiten signal to compute a corresponding
%               ARmodel. 
%       cmp_method: methods to compute the EMG components. Whiten('w') or
%                   Highpass&Whiten('hw', a bit more stable). defualt: 'hw'
%       down_sample:down sample the data to compute the periods.
%                   default:3.
%       numOfIC: adjusted according to number of channels.
%       isave: if save to a file. defualt: false (when the entry is empty)
%              if the entry is not empty, the file is saved to a file
%              given by "Filename".
%       save_range: the Period in the original whole dataset, used to write
%                   the cleaned data into a larger binary file. 
%                   formate: cell(2,1): 
%                           save_range{1}: [Start_Sample  End_Sample;
%                                           Start_Channel End_Channel];
%                           save_range{2}: [total_channels, total_samples],
%                   if not given, save as defualt: [1 nt;1 nch]. 
%       FileName: defualt:  current_dictionary_name.EMG_rm.mat and
%                           current_dictionary_name.lfpc.
%       savedir:    the directory that one is gonna save the data. the
%                   default is the current directory.
%       save_together: if save ICs from all the chunks together. 
%                       default: true
%       use_wb: whether to use the wide band signal when the algorithm
%               can't find a proper flat component at high frequency band
%               defualt: true NB: please check the report fig to see if you
%               really need this! 
%       EMG_shank: the shank currently used. 0: no shank number is given
%       HP:
%       Shk01:
%       EMGFileName
%       
% Outputs:
%   x: EMG removed signal.
%   Ws: unmixing vector of the EMG component.
%   As: loading of the EMG component.
%   EMG_au: normalized EMG component in arbitrary unit.
%   AW: everything about the ICA 
%   armodel: the armodel used. (use the same armodel for all the chunks)
%
%   Note:   function without output arguments saves the EMG component and
%           the binary lfp data to files. For large data I use memmapfile.
% 
% Related functions: 
% EMG_Cluster.m, SREaffineV.m, EMG_rm_main.m.
% This function is a part of the EMG_removing toolbox.
%  
% Error contact: chen at biologie.uni-muenchen.de
% 
% Last Modified: 01.12.2019.


%% COMPLETE VARIABLES

cwd=pwd; %
[silence_periods, included_periods, LFPfs, rm_linenoise, line_thrd, high_pass_freq, EMG_thrd, if_rm_mean,armodel,cmp_method,down_sample,numOfIC,isave,save_range,FileName,savedir,save_together,use_wb,EMG_shank,HP,Shk01,EMGFileName] = ...
    DefaultArgs(varargin, {false, [], 1000, true, 2, 100, [], true,[],'hw',3,0,false,[],[],[],true,false,0,[],[],[]});
[nt, nch] = size(x);
if isempty(included_periods)
    included_periods = 1:nt;
else
    sds = StartEnd1d(included_periods);
    included_periods = find(included_periods);
end
if nt < nch 
    istr = true;
    x = x';
    [nt, nch] = size(x);
else
    istr = false;
end
if isempty(EMG_thrd)
    error('Please Check the high EMG detection file.')
end
if ~numOfIC
    numOfIC = max(fix(.7*nch), min(10,nch));
end
if ~isempty(savedir)
    savedir = [savedir,'/'];
end
selectedprd = EMG_thrd;

%% INITIALIZE the OUTPUTS
Ws= zeros(1,nch);
As= zeros(nch,1);
EMG_au= zeros(nt,1);
%% PREPARE DATA

mx = mean(x);
x = bsxfun(@minus, x, mx);

% Whitening data
if isempty(armodel)
    armodel = dir('*.whitensignal.ARmodel.lfp.mat');
    if isempty(armodel)
        [wx,armodel]=whitensignal(x,[],[],[],1);
        tmp_ar = armodel;
    else
        armodel = load(armodel(1).name);
        wx=whitensignal(x,[],[],armodel.ARmodel);
        tmp_ar = armodel.ARmode;
    end
elseif isstr(armodel)
    armodel = load(armodel);
    tmp_ar = armodel.ARmodel;
    wx=whitensignal(x,[],[],tmp_ar);
elseif isfield(armodel,'ARmodel')
    tmp_ar = armodel.ARmodel;
    wx=whitensignal(x,[],[],tmp_ar);
else 
    try
        tmp_ar = armodel;
        wx=whitensignal(x,[],[],armodel);
    catch 
        warning('Something wrong with the AR model you give, try whiten without given model.')
        [wx, armodel]=whitensignal(x,[],[],[],1);
        tmp_ar = armodel;
    end
end
AW.armodel = tmp_ar;
% opf_A = @(x)(bsxfun(@rdivide,x,std(x)));
if isempty(HP)
    chmap = 1:nch;
    if isempty(save_range)
        HP=chmap;
    else
        HP = save_range{1}(2,1):save_range{1}(2,2);
    end
else
    chmap=HP;
end
opf_a = @(x)bsxfun(@rdivide,x,sqrt(sum(x.^2)));
opf_Aa = @(x)(bsxfun(@rdivide,x,SREaffineV(chmap,x,Shk01)));
opf_A = @(x)opf_Aa(opf_a(x));
% SREaffineV use affine to fit, and compute the variance accordinglty.
% Accounting for the linear leaking from other areas.  
%% REMOVE LINE-NOISE
% note: line noise is still removed for any periods. 
if rm_linenoise
    [A_rm_line,W_rm_line,A_line,W_line,power_ratio,thrd] = EMG_rm_linenoise(wx,line_thrd,LFPfs);
    AW.A_rm_line = A_rm_line;
    AW.W_rm_line = W_rm_line;
    AW.A_line = A_line;
    AW.W_line = W_line;
    AW.power_ratio = power_ratio;
    AW.thrd = thrd;
    if ~isempty(A_rm_line)
        signals = x*W_rm_line';
        for n = 1:size(signals,2)
            tmp_id = find(sign(signals(1:(end-1),n)).*sign(signals(2:end,n))<=0, 1,'first');
            signals(1:tmp_id,n) = 0;
            tmp_id = find(sign(signals(1:(end-1),n)).*sign(signals(2:end,n))<=0, 1,'last');
            signals(tmp_id:end,n) = 0;
        end
        x = x - signals*A_rm_line';
        wx = wx - wx*W_rm_line'*A_rm_line'; % won't affect the results. 
        fprintf('\n Line noise component removed...\n')
    end
end

%% EMG COMPONENTS AND ACTIVITIES
if sum(selectedprd)>=(10*LFPfs)
    AW.usewb = false;
    % Components from the high frequency.
    switch lower(cmp_method) %
        case 'hw'
            hx = butfilter(x,4,high_pass_freq/(LFPfs/2),'high');
            [Ah, Wh] = fastica(hx(selectedprd,:)', 'numOfIC', numOfIC,'verbose','off');
            [~,rod] = sort(abs(sum(opf_A(Ah))),'descend');
            % Components from all
            
            [Ax, Wx] = fastica(Wh(rod,:)*wx(included_periods(1:down_sample:end),:)','verbose','off');
            
            A = Ah(:,rod)*Ax;
            W = Wx*Wh(rod,:);
            if (sum(abs(sum(opf_A(A)))>nch)>1) || sum(abs(sum(opf_A(A)))>(2*nch))<1
                fprintf('recompute...\n')
                wx=whitensignal(wx,[],[],tmp_ar);
                nn = 1;
                while  ((sum(abs(sum(opf_A(A)))>nch)>1) || sum(abs(sum(opf_A(A)))>(2*nch))<1)&&(nn<5)
                    % too many flat components.
                    if ((sum(abs(sum(opf_A(Ah)))>nch)>1) || sum(abs(sum(opf_A(Ah)))>(2*nch))<1)
                        [Ah, Wh] = fastica(hx(selectedprd,:)','verbose','off'); % 'numOfIC', numOfIC,
                    end
                    [Ax, Wx] = fastica(Wh*wx(included_periods(nn:down_sample:end),:)','verbose','off');
                    A = Ah*Ax;
                    W = Wx*Wh;
                    nn = nn+1;
                    fprintf('\r%d in %d...\n',nn,5)
                end
                
                fprintf('\n\n')
            end
            if (sum(abs(sum(opf_A(A)))>nch)<1) && use_wb
                [Awb, Wwb] = fastica(x(included_periods(1:down_sample:end),:)', 'verbose','off');% se
                AW.Awb = Awb;
                AW.Wwb = Wwb;
                if sum(abs(sum(opf_A(Awb)))>(nch*.9))>0
                    A = Awb;
                    W = Wwb;
                    AW.usewb = true;
                    fprintf('\r Using the non-whitened data.\n')
                end
            end
            AW.Ah = Ah;
            AW.Ax = Ax;
            AW.Wh = Wh;
            AW.Wx = Wx;
        case 'w' % Use Whiten alone
            [A, W] = fastica(wx(included_periods(1:down_sample:end),:)', 'numOfIC', numOfIC,'verbose','off');% selectedprd
            if (sum(abs(sum(opf_A(A)))>nch)<1) && use_wb
                [Awb, Wwb] = fastica(x(included_periods(1:down_sample:end),:)', 'verbose','off');% se
                AW.Awb = Awb;
                AW.Wwb = Wwb;
                if sum(abs(sum(opf_A(Awb)))>(nch*.9))>0
                    A = Awb;
                    W = Wwb;
                    AW.usewb = true;
                    fprintf('\r Using the non-whitened data.\n')
                end
            end
        otherwise
            fprintf('Please using hw or w. ')
    end
    
    [~, EMG_comp] = max(abs(sum(opf_A(A))));
    As = A(:,EMG_comp);
    Ws = W(EMG_comp,:);
    EMG_au = (x*Ws');%.*selectedprd;
    % (:,n) is to see the behavior of the highpassed resulted EMG.
    % not need in the final varsion.
    
    AW.A = A;
    AW.W = W;
    
    %% SMOOTHING THE BOUNDRIES OF SILENCED PERIODS.
    cross_searching_ranges = 50;
    if silence_periods
        last_end = 1;
        for k = 1:size(sds,1)
            % for the starting points
            if sds(k,1)<cross_searching_ranges
                [~,id] = FindCrossing(abs(EMG_au(1:cross_searching_ranges)),1);
                EMG_au(1:id) = 0;
            else
                tmp = (sds(k,1)-cross_searching_ranges):sds(k,1);
                [~,id] = FindCrossing(abs(EMG_au(tmp)),-1);
                EMG_au(last_end:tmp(id)) = 0;
            end
            % for the ends
            if sds(k,2)<(nt-cross_searching_ranges)
                tmp = [0:cross_searching_ranges]+sds(k,2);
                [~,id] = FindCrossing(abs(EMG_au(tmp)),1);
                last_end = tmp(id)+1;
            end
        end
        if last_end>1
            EMG_au(last_end:end) = 0;
        end
    end
    %% SMOOTHING THE ENDS OF EMG TRACES.
    
    % first_cross
    if abs(EMG_au(1))<(median(abs(EMG_au))*1e-3)
        first_cross = 1;
    else
        first_cross = find(sign(EMG_au(1:(end-1)).*EMG_au(2:end))<0,1,'first');
    end
    if first_cross>1250
        first_cross = find(EMG_au<=(median(abs(EMG_au))*1e-2),1,'first');
    end
    EMG_au(1:first_cross)=0;
    AW.zero_first = first_cross;% zeros line at first.
    
    % last_cross
    if abs(EMG_au(end))<(median(abs(EMG_au))*1e-3)
        last_cross = nt;
    else
        last_cross = find(sign(EMG_au(1:(end-1)).*EMG_au(2:end))<0,1,'last');
    end
    if (nt-last_cross)>1250
        last_cross = find(EMG_au<=(median(abs(EMG_au))*1e-2),1,'last');
    end
    EMG_au((last_cross+1):end)=0;
    AW.zero_last = nt - last_cross+1;% zeros line at last.
    
    x = x - EMG_au*As';% (:,end)
    if ~if_rm_mean
        x = bsxfun(@plus, x, mx);
    end
    if istr % transpose back.
        x = x';
    end
end
%% OUTPUT OR SAVE DATA
scaling_factor = sign(sum(As))*sqrt(As'*As);
if nargout>1
    varargout{1} = x;
    varargout{2} = Ws;
    varargout{3} = As;
    varargout{4} = EMG_au;
    varargout{5} = AW;
    varargout{6} = tmp_ar;
    varargout{7} = scaling_factor;
else 
    isave = true;
end

% function without output arguments saves the EMG component and the binary
% lfp data to files. 
if isempty(save_range)
    save_range =    [1 nt;...
                    1 nch];
end

if isave
    if isempty(FileName)
        if ~isempty(savedir)
            cwd = savedir;
        else
            cwd = pwd;
        end
        FileName =  cwd((find(cwd=='/',1,'last')+1):end);
        
        LFPfile = sprintf('%s%s.lfpd',savedir,FileName);
        EMGfile = sprintf('%s%s.sh%d.emg',savedir,FileName,EMG_shank);
        
        if exist(LFPfile,'file')
            warning(sprintf('%s already exist! Please check!\n Now saving to the %s.new files.', FileName, FileName))
            FileName = [FileName,'.new'];
            LFPfile = sprintf('%s%s.lfpd',savedir,FileName);
        end
        if ~save_together
            G_par.HPs = HP;
            G_par.Shk01=Shk01;
%             par.lfpSampleRate=LFPfs;
            denoise_shank=EMG_shank;
            save(sprintf('%s.EMG_rm.t%d-%d.ch%d-%d.mat',FileName,save_range(1,:),save_range(2,:)), 'AW','EMG_au','armodel','Ws','As','armodel','selectedprd','denoise_shank','LFPfile','scaling_factor','G_par')
        end
        fileID = fopen(LFPfile,'w');
        fwrite(fileID, int16(x'),'int16');
        fclose(fileID);
        
        fileID = fopen(EMGfile,'w');
        tmp_EMG_au = scaling_factor*EMG_au;
        fwrite(fileID, int16(tmp_EMG_au'),'int16');
        fclose(fileID);
    else
        if ~save_together
            G_par.HPs = HP;
            G_par.Shk01=Shk01;
%             par.lfpSampleRate=LFPfs;
            denoise_shank=EMG_shank;
            save(sprintf('%s.EMG_rm.t%d-%d.ch%d-%d.mat',FileName,save_range{1}(1,:),save_range{1}(2,:)), 'AW','EMG_au','armodel','Ws','As','armodel','selectedprd','denoise_shank','LFPfile','scaling_factor','G_par')
        end
        
        LFPfile = sprintf('%s%s.lfpd',savedir,FileName);
        EMGfile = sprintf('%s%s.sh%d.emg',savedir,FileName,EMG_shank);
        
        m = memmapfile(LFPfile,'Format',{'int16',save_range{2},'x'},'Writable',true);
        m.Data.x(HP, save_range{1}(1,1):save_range{1}(1,2)) = int16(x');
        % save_range{1}(2,1):save_range{1}(2,2) 
        clear m
        m = memmapfile(EMGfile,'Format',{'int16',[1 save_range{2}(2)],'x'},'Writable',true);
        tmp_EMG_au = scaling_factor*EMG_au;
        m.Data.x(save_range{1}(1,1):save_range{1}(1,2)) = int16(tmp_EMG_au');
        % 
        clear m
    end
end
function [val,id] = FindCrossing(x,d)
if d>0 % finding from the left to the right side
    id = find(abs(x)<1e-4,1,'first');
else % from the right to the left side
    id = find(abs(x)<1e-4,1,'last');
end
% if none of them get close enough
if isempty(id)
    [~,id] = min(abs(x));
end
val = x(id);
